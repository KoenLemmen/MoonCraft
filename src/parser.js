/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,22],$V2=[1,29],$V3=[1,30],$V4=[1,31],$V5=[1,32],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,33],$Va=[1,34],$Vb=[1,21],$Vc=[1,28],$Vd=[1,17],$Ve=[1,18],$Vf=[1,19],$Vg=[1,20],$Vh=[5,37,42,43,44,45,49,50,51,52,53,55,56,57,58,60,61,62],$Vi=[5,8,37,42,43,44,45,49,50,51,52,53,55,56,57,58,60,61,62],$Vj=[5,8,37,42,43,44,45,49,50,51,52,53,55,56,57,58,59,60,61,62],$Vk=[1,42],$Vl=[1,43],$Vm=[1,44],$Vn=[1,45],$Vo=[1,46],$Vp=[1,47],$Vq=[1,41],$Vr=[2,46],$Vs=[8,10,11,12,13,14,15,20,21,22,23,24,38,40,41],$Vt=[1,60],$Vu=[40,41],$Vv=[37,49,50,51,52,53],$Vw=[2,50],$Vx=[1,65],$Vy=[8,40];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Program":3,"StatementList":4,"EOF":5,"Statement":6,"StatementSeperator":7,";":8,"AssignmentOperator":9,"=":10,"+=":11,"-=":12,"*=":13,"/=":14,"%=":15,"SingleAssignmentOperator":16,"++":17,"--":18,"ComparationOperator":19,"==":20,">":21,"<":22,">=":23,"<=":24,"SingleStatement":25,"Block":26,"AssignStatement":27,"DefinitionStatement":28,"InlineVariable":29,"ReturnStatement":30,"FunctionDefinition":31,"IfStatement":32,"WhileStatement":33,"DoWhileStatement":34,"ForStatement":35,"VariableType":36,"IDENTIFIER":37,"(":38,"ParameterDefinitionList":39,")":40,",":41,"BOOL_KEYWORD":42,"INT_KEYWORD":43,"FLOAT_KEYWORD":44,"STRING_KEYWORD":45,"FunctionCall":46,"ParameterList":47,"Boolean":48,"INTEGER":49,"DECIMAL":50,"STRING":51,"TRUE":52,"FALSE":53,"ValidateExpression":54,"{":55,"}":56,"RETURN":57,"IF":58,"ELSE":59,"WHILE":60,"DO":61,"FOR":62,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",10:"=",11:"+=",12:"-=",13:"*=",14:"/=",15:"%=",17:"++",18:"--",20:"==",21:">",22:"<",23:">=",24:"<=",37:"IDENTIFIER",38:"(",40:")",41:",",42:"BOOL_KEYWORD",43:"INT_KEYWORD",44:"FLOAT_KEYWORD",45:"STRING_KEYWORD",49:"INTEGER",50:"DECIMAL",51:"STRING",52:"TRUE",53:"FALSE",55:"{",56:"}",57:"RETURN",58:"IF",59:"ELSE",60:"WHILE",61:"DO",62:"FOR"},
productions_: [0,[3,2],[4,3],[4,0],[7,1],[7,0],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[16,1],[16,1],[19,1],[19,1],[19,1],[19,1],[19,1],[25,1],[25,2],[25,2],[25,2],[25,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[31,6],[39,4],[39,2],[39,0],[36,1],[36,1],[36,1],[36,1],[46,4],[47,3],[47,1],[47,0],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[48,1],[48,1],[28,2],[28,4],[27,3],[27,2],[54,1],[54,3],[26,3],[30,2],[32,7],[32,5],[33,5],[34,6],[35,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			return function()
			{
				for(var i = 0; i < $$[$0-1].length; i++)
				{
					if(typeof $$[$0-1][i] != 'undefined')
						$$[$0-1][i]();
				}
			};
		
break;
case 2:
 this.$ = $$[$0-2].concat($$[$0-1]); 
break;
case 3: case 33: case 41:
 this.$ = []; 
break;
case 6:
 this.$ = function(left, right) { util.checkOperator(left, "set", "=", _$[$0]); left.set(right); } 
break;
case 7:
 this.$ = function(left, right) { util.checkOperator(left, "add", "+=", _$[$0]); left.add(right); }; 
break;
case 8:
 this.$ = function(left, right) { util.checkOperator(left, "remove", "-=", _$[$0]); left.remove(right); }; 
break;
case 9:
 this.$ = function(left, right) { util.checkOperator(left, "multiplicate", "*=", _$[$0]); left.multiplicate(right); }; 
break;
case 10:
 this.$ = function(left, right) { util.checkOperator(left, "divide", "/=", _$[$0]); left.divide(right); }; 
break;
case 11:
 this.$ = function(left, right) { util.checkOperator(left, "mod", "%=", _$[$0]); left.mod(right); }; 
break;
case 12:
 this.$ = function(left) { util.checkOperator(left, "add", "++", _$[$0]); left.add(1); }; 
break;
case 13:
 this.$ = function(left) { util.checkOperator(left, "remove", "--", _$[$0]); left.remove(1); }; 
break;
case 14:
 this.$ = function(left, right) { util.checkOperator(left, "isExact", "==", _$[$0]); return left.isExact(right); }; 
break;
case 15:
 this.$ = function(left, right) { util.checkOperator(left, "isBetweenEx", ">", _$[$0]); return left.isBetweenEx(right, undefined); }; 
break;
case 16:
 this.$ = function(left, right) { util.checkOperator(left, "isBetweenEx", "<", _$[$0]); return left.isBetweenEx(undefined, right); }; 
break;
case 17:
 this.$ = function(left, right) { util.checkOperator(left, "isBetween", ">=", _$[$0]); return left.isBetween(right, undefined); }; 
break;
case 18:
 this.$ = function(left, right) { util.checkOperator(left, "isBetween", "<=", _$[$0]); return left.isBetween(undefined, right); }; 
break;
case 30:

			this.$ = function() {};

			functions[$$[$0-4]] = function()
			{
				util.assert($$[$0-2].length == arguments.length, "Invalid call signature: function {0} requries {1} arguments not {2}"
					.format($$[$0-4], $$[$0-2].length, arguments.length));

				for(var i = 0; i < $$[$0-2].length; i++)
				{
					var ctor = $$[$0-2][i].ctor;
					var name = $$[$0-2][i].name;
					var varName = $$[$0-4] + "_" + name;

					util.assert(!util.typeMismatch(ctor.defaultValue, arguments[i]), "Type mismatch: function {0} requires argument {1} to be of type {2} not {3}"
						.format($$[$0-4], name, ctor.typeName, arguments[i].constructor.name));

					if(typeof arguments[i] == 'object' && typeof vars[name] == 'object')
					{
						util.checkOperator(vars[name], "set", "=", _$[$0-2]);
						vars[name].set(arguments[i]);
					}
					else
					{
						vars[name] = ctor(arguments[i], varName);
					}
				}

				base.rjump($$[$0-4]);

				base.addFunction($$[$0-4], function()
				{
					fnReturns[$$[$0-5].typeName] = $$[$0-5](undefined, "ret_" + $$[$0-5].typeName);
					$$[$0]();
					base.ret();
				});

				return fnReturns[$$[$0-5].typeName];
			};

			this.$.typeName = $$[$0-5].typeName;
			functions[$$[$0-4]].typeName = $$[$0-5].typeName;
		
break;
case 31:
 this.$ = $$[$0-3].concat({ctor: $$[$0-1], name: $$[$0]}); 
break;
case 32:
 this.$ = [{ctor: $$[$0-1], name: $$[$0]}]; 
break;
case 34:

			this.$ = function(startVal)
			{
				return new types.Boolean(startVal);
			};
			this.$.typeName = "Boolean";
			this.$.defaultValue = false;
		
break;
case 35:

			this.$ = function(startVal, name)
			{
				return new types.Integer(startVal, name);
			};
			this.$.typeName = "Integer";
			this.$.defaultValue = 0;
		
break;
case 36:

			this.$ = function(startVal)
			{
				return new types.Float(startVal);
			};
			this.$.typeName = "Float";
			this.$.defaultValue = 0.0;
		
break;
case 37:

			this.$ = function(startVal)
			{
				return new types.String(startVal);
			};
			this.$.typeName = "String";
			this.$.defaultValue = "";
		
break;
case 38:

			this.$ = function()
			{
				var val = $$[$0-3]();

				if(typeof val == 'function')
				{
					var args = [];
					for(var i = 0; i < $$[$0-1].length; i++)
						args[i] = $$[$0-1][i]();

					return val.apply(undefined, args);
				}
				else if(typeof val == 'string')
				{
					if($$[$0-1].length > 0)
					{
						throw "Cannot give arguments to command at line {0} column {1} to {2}"
							.format(_$[$0-2].first_line, _$[$0-2].first_column, _$[$0-2].last_column);
					}

					command(val);
				}
				else
				{
					throw "TypeError: {0} is not a function at line {1} column {2} to {3}"
						.format(val, _$[$0-2].first_line, _$[$0-2].first_column, _$[$0-2].last_column);
				}
			};
		
break;
case 39:
 this.$ = $$[$0-2].concat($$[$0]); 
break;
case 40:
 this.$ = [$$[$0]]; 
break;
case 42:
 this.$ = function() { return $$[$0]; }; this.$.typeName = "Boolean"; 
break;
case 43:
 this.$ = function() { return parseInt($$[$0]); }; this.$.typeName = "Integer"; 
break;
case 44:
 this.$ = function() { return parseFloat($$[$0]); }; this.$.typeName = "Float"; 
break;
case 45:
 this.$ = function() { return $$[$0]; }; this.$.typeName = "String"; 
break;
case 46:
 this.$ = function() { util.checkUndefined($$[$0], _$[$0], true); return vars[$$[$0]] || functions[$$[$0]]; }; 
break;
case 47:
 this.$ = $$[$0]; this.$.typeName = $$[$0].typeName; 
break;
case 48:
 this.$ = true; 
break;
case 49:
 this.$ = false; 
break;
case 50:

			this.$ = function()
			{
				util.checkDefined($$[$0], _$[$0]);
				vars[$$[$0]] = $$[$0-1](undefined, $$[$0]);
			};
		
break;
case 51:

			this.$ = function()
			{
				util.checkDefined($$[$0-2], _$[$0-2]);
				vars[$$[$0-2]] = $$[$0-3]($$[$0](), $$[$0-2]);
			};
		
break;
case 52:

			this.$ = function()
			{
				var left = $$[$0-2]();
				var right = $$[$0]();

				util.assert(!util.typeMismatch(left, right), "Type mismatch: cannot assign {0} to {1} at line {2} column {3} to {4}"
					.format(right.constructor.name, left.constructor.name, _$[$0-1].first_line, _$[$0-1].first_column, _$[$0-1].last_column));


				$$[$0-1](left, right);
			};
		
break;
case 53:

			this.$ = function()
			{
				util.checkUndefined($$[$0-1], _$[$0-1]);

				$$[$0](vars[$$[$0-1]]);
			};
		
break;
case 54:

			this.$ = function(callback)
			{
				var val = $$[$0]();

				if(typeof left == 'string')
					return left;

				checkOperator(left, "isExact", "== true", _$[$0]);
				return left.isExact(true);
			};
		
break;
case 55:

			this.$ = function()
			{
				var left = $$[$0-2]();
				var right = $$[$0]();

				util.assert(!util.typeMismatch(left, right), "Type mismatch: cannot compare {0} and {1} at line {2} column {3} to {4}"
					.format(left.constructor.name, right.constructor.name, _$[$0-1].first_line, _$[$0-1].first_column, _$[$0-1].last_column));

				if(typeof left == 'object' && typeof right == 'object')
				{
					util.checkOperator(left, "clone", "clone", _$[$0-2]);
					copy = left.clone("comparation");

					util.checkOperator(copy, "remove", "-=", _$[$0-2]);
					copy.remove(right);

					return $$[$0-1](copy, 0);
				}
				else
				{
					var _left = (typeof left == 'object') ? left : right;
					var _right = (typeof left == 'object') ? right : left;

					return $$[$0-1](_left, _right);
				}
			};
		
break;
case 56:

			this.$ = function()
			{
				for(var i = 0; i < $$[$0-1].length; i++)
					$$[$0-1][i]();
			}
		
break;
case 57:

			this.$ = function()
			{
				var val = $$[$0]();
				var typeName = $$[$0].typeName || val.constructor.name;

				util.assert(fnReturns[typeName] && typeof fnReturns[typeName].set == "function",
					"Invalid return statement at line {0} column {1} to {2}"
						.format(_$[$0-1].first_line, _$[$0-1].first_column, _$[$0-1].last_column));

				fnReturns[typeName].set(val);

				base.ret();
			}
		
break;
case 58:

			this.$ = function()
			{
				var ifName = util.nextName("if");
				var elseName = ifName + "else";
				var endName = ifName + "end";

				command($$[$0-4]());
				base.jump(ifName, true);
				command("testforblock %-2:diff% minecraft:chain_command_block -1 {SuccessCount:0}");
				base.jump(elseName, true);

				base.addFunction(ifName, function()
				{
					$$[$0-2]();
					base.jump(endName, false);
				});
				base.addFunction(elseName, function()
				{
					$$[$0]();
					base.jump(endName, false);
				});

				block(options.splitterBlock);
				base.addLabel(endName);
			}
		
break;
case 59:

			this.$ = function()
			{
				var name = util.nextName("if");
				var endName = name + "end";

				command($$[$0-2]());
				base.jump(name, true);
				command("testforblock %-2:diff% minecraft:chain_command_block -1 {SuccessCount:0}");
				base.jump(endName, true);

				base.addFunction(name, function()
				{
					$$[$0]();
					base.jump(endName, false);
				});

				block(options.splitterBlock);
				base.addLabel(endName);
			};
		
break;
case 60:

			this.$ = function()
			{
				var name = util.nextName("while");
				var checkName = name + "check";
				var endName = name + "end";

				base.jump(checkName);

				base.addFunction(name, function()
				{
					$$[$0]();

					base.addLabel(checkName);
					command($$[$0-2]());
					base.jump(name, true);
					command("testforblock %-2:diff% minecraft:chain_command_block -1 {SuccessCount:0}");
					base.jump(endName, true);
				});

				block(options.splitterBlock);
				base.addLabel(endName);
			};
		
break;
case 61:

			this.$ = function()
			{
				var name = util.nextName("do");
				var endName = name + "end";

				base.addFunction(name, function()
				{
					$$[$0-4]();

					command($$[$0-1]());
					base.jump(name, true);
					command("testforblock %-2:diff% minecraft:chain_command_block -1 {SuccessCount:0}");
					base.jump(endName, true);
				});

				block(options.splitterBlock);
				base.addLabel(endName);
			};
		
break;
case 62:

			this.$ = function()
			{
				var name = util.nextName("for");
				var checkName = name + "check";
				var endName = name + "end";

				$$[$0-6]();
				base.jump(checkName);

				base.addFunction(name, function()
				{
					$$[$0]();
					$$[$0-2]();

					base.addLabel(checkName);
					command($$[$0-4]());
					base.jump(name, true);
					command("testforblock %-2:diff% minecraft:chain_command_block -1 {SuccessCount:0}");
					base.jump(endName, true);
				});

				block(options.splitterBlock);
				base.addLabel(endName);
			};
		
break;
}
},
table: [o([5,37,42,43,44,45,49,50,51,52,53,55,57,58,60,61,62],$V0,{3:1,4:2}),{1:[3]},{5:[1,3],6:4,25:5,26:11,27:12,28:13,29:14,30:15,31:6,32:7,33:8,34:9,35:10,36:16,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,55:$Vb,57:$Vc,58:$Vd,60:$Ve,61:$Vf,62:$Vg},{1:[2,1]},o($Vh,[2,5],{7:35,8:[1,36]}),o($Vi,[2,24]),o($Vi,[2,25]),o($Vi,[2,26]),o($Vi,[2,27]),o($Vi,[2,28]),o($Vi,[2,29]),o($Vj,[2,19]),{8:[1,37]},{8:[1,38]},{8:[1,39],9:40,10:$Vk,11:$Vl,12:$Vm,13:$Vn,14:$Vo,15:$Vp,38:$Vq},{8:[1,48]},{37:[1,49]},{38:[1,50]},{38:[1,51]},{25:52,26:11,27:12,28:13,29:14,30:15,36:53,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,55:$Vb,57:$Vc},{38:[1,54]},o([37,42,43,44,45,49,50,51,52,53,55,56,57,58,60,61,62],$V0,{4:55}),o([8,10,11,12,13,14,15,38],$Vr,{16:56,17:[1,57],18:[1,58]}),o($Vs,[2,42]),o($Vs,[2,43]),o($Vs,[2,44]),o($Vs,[2,45]),o($Vs,[2,47]),{29:59,37:$Vt,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va},{37:[2,34]},{37:[2,35]},{37:[2,36]},{37:[2,37]},o($Vs,[2,48]),o($Vs,[2,49]),o($Vh,[2,2]),o($Vh,[2,4]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),{29:61,37:$Vt,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va},o($Vu,[2,41],{48:23,46:27,47:62,29:63,37:$Vt,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va}),o($Vv,[2,6]),o($Vv,[2,7]),o($Vv,[2,8]),o($Vv,[2,9]),o($Vv,[2,10]),o($Vv,[2,11]),o($Vj,[2,23]),{8:$Vw,10:$Vx,38:[1,64]},{29:67,37:$Vt,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:66},{29:67,37:$Vt,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:68},{60:[1,69]},{37:[1,70]},{28:71,36:53,42:$V2,43:$V3,44:$V4,45:$V5},{6:4,25:5,26:11,27:12,28:13,29:14,30:15,31:6,32:7,33:8,34:9,35:10,36:16,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,55:$Vb,56:[1,72],57:$Vc,58:$Vd,60:$Ve,61:$Vf,62:$Vg},o($Vy,[2,53]),o($Vy,[2,12]),o($Vy,[2,13]),{8:[2,57],38:$Vq},o([8,20,21,22,23,24,38,40,41],$Vr),o($Vy,[2,52],{38:$Vq}),{40:[1,73],41:[1,74]},o($Vu,[2,40],{38:$Vq}),o($Vu,[2,33],{39:75,36:76,42:$V2,43:$V3,44:$V4,45:$V5}),{29:77,37:$Vt,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va},{40:[1,78]},o($Vy,[2,54],{19:79,20:[1,80],21:[1,81],22:[1,82],23:[1,83],24:[1,84],38:$Vq}),{40:[1,85]},{38:[1,86]},{8:$Vw,10:$Vx},{8:[1,87]},o($Vj,[2,56]),o($Vs,[2,38]),{29:88,37:$Vt,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va},{40:[1,89],41:[1,90]},{37:[1,91]},{8:[2,51],38:$Vq},{25:92,26:11,27:12,28:13,29:14,30:15,36:53,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,55:$Vb,57:$Vc},{29:93,37:$Vt,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va},o($Vv,[2,14]),o($Vv,[2,15]),o($Vv,[2,16]),o($Vv,[2,17]),o($Vv,[2,18]),{25:94,26:11,27:12,28:13,29:14,30:15,36:53,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,55:$Vb,57:$Vc},{29:67,37:$Vt,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:95},{29:67,37:$Vt,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:96},o($Vu,[2,39],{38:$Vq}),{26:97,55:$Vb},{36:98,42:$V2,43:$V3,44:$V4,45:$V5},o($Vu,[2,32]),o($Vi,[2,59],{59:[1,99]}),o($Vy,[2,55],{38:$Vq}),o($Vi,[2,60]),{40:[1,100]},{8:[1,101]},o($Vi,[2,30]),{37:[1,102]},{25:103,26:11,27:12,28:13,29:14,30:15,36:53,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,55:$Vb,57:$Vc},o($Vi,[2,61]),{27:104,29:105,37:$V1,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va},o($Vu,[2,31]),o($Vi,[2,58]),{40:[1,106]},{9:40,10:$Vk,11:$Vl,12:$Vm,13:$Vn,14:$Vo,15:$Vp,38:$Vq},{25:107,26:11,27:12,28:13,29:14,30:15,36:53,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:27,48:23,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,55:$Vb,57:$Vc},o($Vi,[2,62])],
defaultActions: {3:[2,1],29:[2,34],30:[2,35],31:[2,36],32:[2,37]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var vars = {};
var functions = {};
var fnReturns = {};
var util = new (require("./lib/util.js"))(vars, functions);
var types = require("./lib/types.js");
var base = require("./lib/base.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* ignore */ 
break;
case 1: /* ignore */ 
break;
case 2: return 20; 
break;
case 3: return 24; 
break;
case 4: return 23; 
break;
case 5: return 22; 
break;
case 6: return 21; 
break;
case 7: return 10; 
break;
case 8: return 11; 
break;
case 9: return 12; 
break;
case 10: return 13; 
break;
case 11: return 14; 
break;
case 12: return 15; 
break;
case 13: return 17; 
break;
case 14: return 18; 
break;
case 15: return '.'; 
break;
case 16: return 8; 
break;
case 17: return 41; 
break;
case 18: return 38; 
break;
case 19: return 40; 
break;
case 20: return 55; 
break;
case 21: return 56; 
break;
case 22: return 42; 
break;
case 23: return 43; 
break;
case 24: return 44; 
break;
case 25: return 45; 
break;
case 26: return 57; 
break;
case 27: return 58; 
break;
case 28: return 59; 
break;
case 29: return 60; 
break;
case 30: return 61; 
break;
case 31: return 62; 
break;
case 32: return 52; 
break;
case 33: return 53; 
break;
case 34: return 50; 
break;
case 35: return 49; 
break;
case 36: return 37; 
break;
case 37: yy_.yytext = yy_.yytext.slice(1, -1).replace(/\\"/g, "\""); return 51; 
break;
case 38: return 5; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*($|\r\n|\r|\n))/,/^(?:==)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:bool\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:string\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:-?[0-9]+\.[0-9]{0,2})/,/^(?:-?[0-9]+)/,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/,/^(?:"((\\")|[^"])+")/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}